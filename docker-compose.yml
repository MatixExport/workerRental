version: '3.8'

services:

#  rent_microservice:
#    build:
#      context: .
#      dockerfile: Dockerfile-RentMicroService
#    container_name: RentMicroservice
#    networks:
#      - mongonet
#    ports:
#      - "8080:8080"
#      - "80:80"
#    depends_on:
#      mongo1:
#        condition: service_healthy
#      mongo2:
#        condition: service_healthy
#      mongo3:
#        condition: service_healthy
#
#
#  user_microservice:
#    build:
#      context: .
#      dockerfile: Dockerfile-UserMicroService
#    container_name: UserMicroservice
#    networks:
#      - mongonet
#    ports:
#      - "8181:8181"
#      - "81:81"
#    depends_on:
#      usermongo1:
#        condition: service_healthy
#      usermongo2:
#        condition: service_healthy
#      usermongo3:
#        condition: service_healthy


#  mongodb_lite:
#    image: mongo:latest
#    ports:
#      - '27017:27017'
#    environment:
#      - MONGO_INITDB_ROOT_USERNAME=ADMIN
#      - MONGO_INITDB_ROOT_PASSWORD=ADMINPASSWORD
#      - MONGO_INITDB_DATABASE=workerRental
#    command: --config /etc/mongod.conf --port 27017


  kafka1:
    image: docker.io/bitnami/kafka:3.6
    hostname: kafka1
    container_name: kafka1
    ports:
      - target: 9192
        published: 9192
        protocol: tcp
      - target: 9193
        published: 9193
        protocol: tcp
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_BROKER_RACK=RACK1
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=CONTROLLER://:9193,DOCKER_EXTERNAL://kafka1:9192,DOCKER_INTERNAL://kafka1:19192
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT,DOCKER_INTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=DOCKER_INTERNAL
      - KAFKA_CFG_ADVERTISED_LISTENERS=DOCKER_EXTERNAL://kafka1:9192,DOCKER_INTERNAL://kafka1:19192
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9193,2@kafka2:9293,3@kafka3:9393
      - KAFKA_KRAFT_CLUSTER_ID=NTg2OWZhNzY3NDhjMTFlZG
      - ALLOW_PLAINTEXT_LISTENER=yes
    #      - KAFKA_OPTS=-Dlog4j.rootLogger=DEBUG
    volumes:
      - kafka1_data:/bitnami/kafka
    networks:
      - kafkanet


  kafka2:
    image: docker.io/bitnami/kafka:3.6
    hostname: kafka2
    container_name: kafka2
    ports:
      - target: 9292
        published: 9292
        protocol: tcp
      - target: 9293
        published: 9293
        protocol: tcp
    environment:
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_BROKER_ID=2
      - KAFKA_CFG_BROKER_RACK=RACK1
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=CONTROLLER://:9293,DOCKER_EXTERNAL://kafka2:9292,DOCKER_INTERNAL://kafka2:19292
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT,DOCKER_INTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=DOCKER_INTERNAL
      - KAFKA_CFG_ADVERTISED_LISTENERS=DOCKER_EXTERNAL://kafka2:9292,DOCKER_INTERNAL://kafka2:19292
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9193,2@kafka2:9293,3@kafka3:9393
      - KAFKA_KRAFT_CLUSTER_ID=NTg2OWZhNzY3NDhjMTFlZG
      - ALLOW_PLAINTEXT_LISTENER=yes
    #      - KAFKA_OPTS=-Dlog4j.rootLogger=DEBUG
    volumes:
      - kafka2_data:/bitnami/kafka
    networks:
      - kafkanet

  kafka3:
    image: docker.io/bitnami/kafka:3.6
    hostname: kafka3
    container_name: kafka3
    ports:
      - target: 9392
        published: 9392
        protocol: tcp
      - target: 9393
        published: 9393
        protocol: tcp
    environment:
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_CFG_BROKER_ID=3
      - KAFKA_CFG_BROKER_RACK=RACK1
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=CONTROLLER://:9393,DOCKER_EXTERNAL://kafka3:9392,DOCKER_INTERNAL://kafka3:19392
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT,DOCKER_INTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=DOCKER_INTERNAL
      - KAFKA_CFG_ADVERTISED_LISTENERS=DOCKER_EXTERNAL://kafka3:9392,DOCKER_INTERNAL://kafka3:19392
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka1:9193,2@kafka2:9293,3@kafka3:9393
      - KAFKA_KRAFT_CLUSTER_ID=NTg2OWZhNzY3NDhjMTFlZG
      - ALLOW_PLAINTEXT_LISTENER=yes
    #      - KAFKA_OPTS=-Dlog4j.rootLogger=DEBUG
    volumes:
      - kafka3_data:/bitnami/kafka
    networks:
      - kafkanet



#  frontend:
#    build:
#      context: .
#      dockerfile: Dockerfile-frontend
#    container_name: svelte_front
#    ports:
#      - "5173:5173"


  mongo1:
    build:
      context: .
      dockerfile: Dockerfile-mongoDB
    container_name: mongo1

    hostname: mongo1
    networks:
      - mongonet
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=ADMIN
      - MONGO_INITDB_ROOT_PASSWORD=ADMINPASSWORD
      - MONGO_INITDB_DATABASE=workerRental
    command: --config /etc/mongod.conf --port 27017
    healthcheck:
      test: ["CMD","mongosh", "--port", "27017", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 2s
      retries: 5
  mongo2:
    build:
      context: .
      dockerfile: Dockerfile-mongoDB
    container_name: mongo2
    hostname: mongo2
    networks:
      - mongonet
    ports:
      - "27018:27018"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=ADMIN
      - MONGO_INITDB_ROOT_PASSWORD=ADMINPASSWORD
      - MONGO_INITDB_DATABASE=workerRental
    command: --config /etc/mongod.conf --port 27018
    healthcheck:
      test: ["CMD","mongosh", "--port", "27018", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 2s
      retries: 5
  mongo3:
    build:
      context: .
      dockerfile: Dockerfile-mongoDB
    container_name: mongo3
    hostname: mongo3
    networks:
      - mongonet
    ports:
      - "27019:27019"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=ADMIN
      - MONGO_INITDB_ROOT_PASSWORD=ADMINPASSWORD
      - MONGO_INITDB_DATABASE=workerRental
    command: --config /etc/mongod.conf --port 27019
    healthcheck:
      test: ["CMD","mongosh", "--port", "27019", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 2s
      retries: 5



  mongoinit:
    build:
      context: .
      dockerfile: Dockerfile-mongoDB
    hostname: mongodbinit
    container_name: mongodbinit
    networks:
      - mongonet
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy

    command: >
      mongosh --host mongo1:27017 --username ADMIN --password ADMINPASSWORD --authenticationDatabase admin --eval
      '
      rs.initiate(
        {
          _id: "replica_set_single",
          version: 1,
          members: [
            {_id:0, host : "mongo1:27017" },
            {_id:1, host : "mongo2:27018" },
            {_id:2, host : "mongo3:27019" }
          ]
        }
      );
      '

  usermongo1:
    build:
      context: .
      dockerfile: Dockerfile-mongoDB
    container_name: usermongo1

    hostname: usermongo1
    networks:
      - mongonet
    ports:
      - "27117:27117"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=ADMIN
      - MONGO_INITDB_ROOT_PASSWORD=ADMINPASSWORD
      - MONGO_INITDB_DATABASE=workerRental
    command: --config /etc/mongod.conf --port 27117
    healthcheck:
      test: ["CMD","mongosh", "--port", "27117", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 2s
      retries: 5
  usermongo2:
    build:
      context: .
      dockerfile: Dockerfile-mongoDB
    container_name: usermongo2
    hostname: usermongo2
    networks:
      - mongonet
    ports:
      - "27118:27118"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=ADMIN
      - MONGO_INITDB_ROOT_PASSWORD=ADMINPASSWORD
      - MONGO_INITDB_DATABASE=workerRental
    command: --config /etc/mongod.conf --port 27118
    healthcheck:
      test: ["CMD","mongosh", "--port", "27118", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 2s
      retries: 5
  usermongo3:
    build:
      context: .
      dockerfile: Dockerfile-mongoDB
    container_name: usermongo3
    hostname: usermongo3
    networks:
      - mongonet
    ports:
      - "27119:27119"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=ADMIN
      - MONGO_INITDB_ROOT_PASSWORD=ADMINPASSWORD
      - MONGO_INITDB_DATABASE=workerRental
    command: --config /etc/mongod.conf --port 27119
    healthcheck:
      test: ["CMD","mongosh", "--port", "27119", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 2s
      retries: 5



  usermongoinit:
    build:
      context: .
      dockerfile: Dockerfile-mongoDB
    hostname: usermongoinit
    container_name: usermongoinit
    networks:
      - mongonet
    depends_on:
      usermongo1:
        condition: service_healthy
      usermongo2:
        condition: service_healthy
      usermongo3:
        condition: service_healthy

    command: >
      mongosh --host usermongo1:27117 --username ADMIN --password ADMINPASSWORD --authenticationDatabase admin --eval
      '
      rs.initiate(
        {
          _id: "replica_set_single",
          version: 1,
          members: [
            {_id:0, host : "usermongo1:27117" },
            {_id:1, host : "usermongo2:27118" },
            {_id:2, host : "usermongo3:27119" }
          ]
        }
      );
      '

volumes:
  redis-stack-data:
    driver: local
  kafka1_data:
    driver: local
  kafka2_data:
    driver: local
  kafka3_data:
    driver: local

networks:
  mongonet: {}
  redisnet: {}
  kafkanet:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/16


