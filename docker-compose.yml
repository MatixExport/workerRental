version: '3.8'

services:

  rent_microservice:
    build:
      context: .
      dockerfile: Dockerfile-RentMicroService
    container_name: RentMicroservice
    networks:
      - mongonet
    ports:
      - "8080:8080"
      - "80:80"
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy


  user_microservice:
    build:
      context: .
      dockerfile: Dockerfile-UserMicroService
    container_name: UserMicroservice
    networks:
      - mongonet
    ports:
      - "8181:8181"
      - "81:81"
    depends_on:
      usermongo1:
        condition: service_healthy
      usermongo2:
        condition: service_healthy
      usermongo3:
        condition: service_healthy


#  mongodb_lite:
#    image: mongo:latest
#    ports:
#      - '27017:27017'
#    environment:
#      - MONGO_INITDB_ROOT_USERNAME=ADMIN
#      - MONGO_INITDB_ROOT_PASSWORD=ADMINPASSWORD
#      - MONGO_INITDB_DATABASE=workerRental
#    command: --config /etc/mongod.conf --port 27017



  frontend:
    build:
      context: .
      dockerfile: Dockerfile-frontend
    container_name: svelte_front
    ports:
      - "5173:5173"


  mongo1:
    build:
      context: .
      dockerfile: Dockerfile-mongoDB
    container_name: mongo1

    hostname: mongo1
    networks:
      - mongonet
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=ADMIN
      - MONGO_INITDB_ROOT_PASSWORD=ADMINPASSWORD
      - MONGO_INITDB_DATABASE=workerRental
    command: --config /etc/mongod.conf --port 27017
    healthcheck:
      test: ["CMD","mongosh", "--port", "27017", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 2s
      retries: 5
  mongo2:
    build:
      context: .
      dockerfile: Dockerfile-mongoDB
    container_name: mongo2
    hostname: mongo2
    networks:
      - mongonet
    ports:
      - "27018:27018"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=ADMIN
      - MONGO_INITDB_ROOT_PASSWORD=ADMINPASSWORD
      - MONGO_INITDB_DATABASE=workerRental
    command: --config /etc/mongod.conf --port 27018
    healthcheck:
      test: ["CMD","mongosh", "--port", "27018", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 2s
      retries: 5
  mongo3:
    build:
      context: .
      dockerfile: Dockerfile-mongoDB
    container_name: mongo3
    hostname: mongo3
    networks:
      - mongonet
    ports:
      - "27019:27019"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=ADMIN
      - MONGO_INITDB_ROOT_PASSWORD=ADMINPASSWORD
      - MONGO_INITDB_DATABASE=workerRental
    command: --config /etc/mongod.conf --port 27019
    healthcheck:
      test: ["CMD","mongosh", "--port", "27019", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 2s
      retries: 5



  mongoinit:
    build:
      context: .
      dockerfile: Dockerfile-mongoDB
    hostname: mongodbinit
    container_name: mongodbinit
    networks:
      - mongonet
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy

    command: >
      mongosh --host mongo1:27017 --username ADMIN --password ADMINPASSWORD --authenticationDatabase admin --eval
      '
      rs.initiate(
        {
          _id: "replica_set_single",
          version: 1,
          members: [
            {_id:0, host : "mongo1:27017" },
            {_id:1, host : "mongo2:27018" },
            {_id:2, host : "mongo3:27019" }
          ]
        }
      );
      '

  usermongo1:
    build:
      context: .
      dockerfile: Dockerfile-mongoDB
    container_name: usermongo1

    hostname: usermongo1
    networks:
      - mongonet
    ports:
      - "27117:27117"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=ADMIN
      - MONGO_INITDB_ROOT_PASSWORD=ADMINPASSWORD
      - MONGO_INITDB_DATABASE=workerRental
    command: --config /etc/mongod.conf --port 27117
    healthcheck:
      test: ["CMD","mongosh", "--port", "27117", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 2s
      retries: 5
  usermongo2:
    build:
      context: .
      dockerfile: Dockerfile-mongoDB
    container_name: usermongo2
    hostname: usermongo2
    networks:
      - mongonet
    ports:
      - "27118:27118"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=ADMIN
      - MONGO_INITDB_ROOT_PASSWORD=ADMINPASSWORD
      - MONGO_INITDB_DATABASE=workerRental
    command: --config /etc/mongod.conf --port 27118
    healthcheck:
      test: ["CMD","mongosh", "--port", "27118", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 2s
      retries: 5
  usermongo3:
    build:
      context: .
      dockerfile: Dockerfile-mongoDB
    container_name: usermongo3
    hostname: usermongo3
    networks:
      - mongonet
    ports:
      - "27119:27119"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=ADMIN
      - MONGO_INITDB_ROOT_PASSWORD=ADMINPASSWORD
      - MONGO_INITDB_DATABASE=workerRental
    command: --config /etc/mongod.conf --port 27119
    healthcheck:
      test: ["CMD","mongosh", "--port", "27119", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 2s
      retries: 5



  usermongoinit:
    build:
      context: .
      dockerfile: Dockerfile-mongoDB
    hostname: usermongoinit
    container_name: usermongoinit
    networks:
      - mongonet
    depends_on:
      usermongo1:
        condition: service_healthy
      usermongo2:
        condition: service_healthy
      usermongo3:
        condition: service_healthy

    command: >
      mongosh --host usermongo1:27117 --username ADMIN --password ADMINPASSWORD --authenticationDatabase admin --eval
      '
      rs.initiate(
        {
          _id: "replica_set_single",
          version: 1,
          members: [
            {_id:0, host : "usermongo1:27117" },
            {_id:1, host : "usermongo2:27118" },
            {_id:2, host : "usermongo3:27119" }
          ]
        }
      );
      '

networks:
  mongonet: {}


